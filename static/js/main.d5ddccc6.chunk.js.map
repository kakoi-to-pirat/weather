{"version":3,"sources":["utils/Api.js","utils/Tools.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","fetch","response","json","parsToTemperature","data","list","map","item","name","dt_txt","slice","temperature","min","main","temp_min","max","temp_max","Math","round","getWeather","Weather","state","dataWeather","this","setState","width","height","dataKey","stroke","angle","position","value","offset","unit","type","onClick","buttonGetWeather","graphDraw","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAAMA,G,OAAS,uCAAG,4BAAAC,EAAA,sEACSC,MAAM,gIADf,cACRC,EADQ,gBAEDA,EAASC,OAFR,mFAAH,sDCETC,EAAoB,SAACC,GAO3B,OANeA,EAAKC,KAAKC,KAAI,SAACC,GAC5B,MAAO,CACLC,KAAOD,EAAKE,OAAOC,MAAM,EAAG,IAC5BC,aANkBC,EAMSL,EAAKM,KAAKC,SANdC,EAMwBR,EAAKM,KAAKG,SAN1BC,KAAKC,OAAON,EAAMG,GAAO,KAAvC,IAACH,EAAKG,M,QCarBI,EAAU,uCAAG,sBAAApB,EAAA,kEAAmBI,EAAnB,SAA2CL,IAA3C,qIAAH,qDAEVsB,E,kDAEF,aAAc,IAAD,8BACT,gBACKC,MAAQ,CAACC,YAAa,CAAC,CAACd,KAAO,IAAKG,YAAc,IAAI,CAACH,KAAO,IAAKG,YAAc,MAF7E,E,qLAKTY,K,SAAmCJ,I,yBAApBG,Y,WAAVE,S,wJAGJ,OACG,6BACI,kBAAC,IAAD,CAAWC,MAAO,KAAMC,OAAQ,IAAKtB,KAAMmB,KAAKF,MAAMC,aAClD,kBAAC,IAAD,CAAOK,QAAQ,OAAOC,OAAO,OAAOC,MAAO,GAAIC,SAAS,gBACxD,kBAAC,IAAD,CAAOC,MAAM,2BAAOC,QAAS,EAAGF,SAAS,kBAEzC,kBAAC,IAAD,CAAQG,KAAO,OAAIN,QAAQ,cAAcC,OAAO,QAC5C,kBAAC,IAAD,CAAOG,MAAM,qEAAcC,OAAQ,EAAGF,SAAS,aAAaD,OAAU,MAE1E,kBAAC,IAAD,CAAeD,OAAO,SACtB,kBAAC,IAAD,CAAMM,KAAK,WAAWP,QAAQ,cAAcC,OAAO,YAAY,iC,+BAKrE,IAAD,OAEL,OACA,6BACI,4BAAQO,QAAO,sBACX,sBAAApC,EAAA,sEACM,EAAKqC,mBADX,4CADJ,2FAI4B,6BAAS,6BAAS,6BAAS,6BACvDb,KAAKc,iB,GAlCKC,aCHFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,oLAAqC,6BAAS,6BAC9C,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5ddccc6.chunk.js","sourcesContent":["const fetchData = async () => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=stavropol,rus&appid=dfa9203fc19394100719613828a57682&units=metric&lang=ru`);\n    return await response.json();\n};\n\nexport {\n    fetchData\n};","const averageValue = (min, max) => Math.round((min + max) / 2);\n\nconst parsToTemperature = (data) =>{\nconst result = data.list.map((item) =>  { \n  return {\n    name : item.dt_txt.slice(8, 10),\n    temperature : averageValue(item.main.temp_min, item.main.temp_max)}\n\n});\nreturn result;\n}\n\nexport {parsToTemperature};","import React, { Component } from \"react\";\nimport './App.css';\nimport {fetchData} from './utils/Api'\nimport {parsToTemperature} from './utils/Tools'\nimport {\n  XAxis,\n  YAxis,\n  LineChart,\n  CartesianGrid,\n  Line,\n  Label\n} from \"recharts\";\n\nconst getWeather = async () =>  await parsToTemperature(await fetchData());\n\nclass Weather extends Component \n{\n    constructor(){\n        super();\n        this.state = {dataWeather: [{name : \"0\", temperature : 15},{name : \"1\", temperature : 15}]};\n    }\n    async buttonGetWeather() {\n        this.setState({dataWeather : await getWeather()})\n    }\n    graphDraw(){\n         return(\n            <div>\n                <LineChart width={1100} height={300} data={this.state.dataWeather}>\n                    <XAxis dataKey=\"name\" stroke=\"#000\" angle={45} position=\"insideBottom\">\n                    <Label value=\"дата\" offset={-3} position=\"insideBottom\" />\n                    </XAxis>\n                    <YAxis  unit = \"°\" dataKey=\"temperature\" stroke=\"#000\">\n                        <Label value=\"Температура\" offset={5} position=\"insideLeft\" angle = {-90}/>\n                    </YAxis>\n                    <CartesianGrid stroke=\"#eee\"/>\n                    <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#12b202\" /><br></br>\n                </LineChart>\n            </div> \n        )   \n    }\n    render() {\n        \n        return (\n        <div>\n            <button onClick = { \n                async () => {\n                await this.buttonGetWeather();\n                }\n            }> Получить погоду </button><br></br><br></br><br></br><br></br>\n           {this.graphDraw()}\n        </div>\n        );\n    }\n}   \n\nexport {Weather};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Weather} from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>График погоды: Простая линия</h1><br></br><br></br>\n    <Weather/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}